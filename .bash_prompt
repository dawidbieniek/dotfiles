default_username="dawid"

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2

if [[ -n "$ZSH_VERSION" ]]; then  # quit now if in zsh
    return 1 2> /dev/null || exit 1;
fi;

# Prompt functions
set_prompts() {
    local black="" blue="" bold="" cyan="" green="" orange="" \
          purple="" red="" reset="" white="" yellow=""

    local dateCmd=""

    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then
        tput sgr0 # Reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Color config for 255 color display
        black=$(tput setaf 0)
        blue=$(tput setaf 27)
        cyan=$(tput setaf 51)
        green=$(tput setaf 46)
        orange=$(tput setaf 208)
        purple=$(tput setaf 141)
        red=$(tput setaf 160)
        violet=$(tput setaf 99)
        magenta=$(tput setaf 129)
        white=$(tput setaf 15)
        yellow=$(tput setaf 226)
    fi

    # Only show username/host if not default
    function usernamehost() {
        # Highlight the user name when logged in as root.
        if [[ "${USER}" == *"root" ]]; then
            userStyle="${red}";
        else
            userStyle="${cyan}";
        fi;

        userhost=""
        userhost+="\[${userStyle}\]$USER"
        userhost+="\[${white}\]@"
        userhost+="\[${green}\]$HOSTNAME"
        userhost+="\[${white}\]:"

        if [ -n "$SSH_CONNECTION" ] || [ $USER != "$default_username" ]; then echo $userhost; fi
    }

    function prompt_git() {
        # this is >5x faster than mathias's.

        # check if we're in a git repo. (fast)
        git rev-parse --is-inside-work-tree &>/dev/null || return

        # check for what branch we're on. (fast)
        #   if… HEAD isn’t a symbolic ref (typical branch),
        #   then… get a tracking remote branch or tag
        #   otherwise… get the short SHA for the latest commit
        #   lastly just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git describe --all --exact-match HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";


        ## early exit for Chromium & Blink repo, as the dirty check takes ~5s
        ## see other Chromium repo hacking optimizations: https://github.com/paulirish/dotfiles/blob/master/setup-a-new-machine.sh#L214
        repoUrl=$(git config --get remote.origin.url)
        if grep -q chromium.googlesource.com <<<$repoUrl; then
            dirty=" (*)"
        else
            # check if it's dirty (slow)
            #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
            dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "*")

            # mathias has a few more checks some may like:
            #    github.com/mathiasbynens/dotfiles/blob/a8bd0d4300/.bash_prompt#L30-L43
        fi

        [ -n "${s}" ] && s=" [${s}]";
        echo -e "${1}${branchName}${2}$dirty";

        return
    }

    ### Prompt string ###
    PS1=""                                 # terminal title (set to the current working directory)
    PS1+="\[$bold\]"
    PS1+="$(usernamehost)"                              # username at host
    PS1+="\[$orange\]\w"                                     # working directory
    PS1+="\$(prompt_git \"\[$white\] ~ \[$violet\]\" \"\[$purple\]\")"   # git repository details
    PS1+="\n"
    PS1+="\[$reset$cyan\]\\$ \[$reset\]"

    export PS1
}

set_prompts
unset set_prompts
